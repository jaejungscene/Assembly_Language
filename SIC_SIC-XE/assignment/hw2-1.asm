MAIN	START	1000

.	main flow
FIRST	TD	INDEV
	JEQ	FIRST
	JSUB	SETSIZE
	JSUB	STKINIT
LOOP	JSUB	PRIPROM
	JSUB	SCAN
	JSUB	TOPCOM
	JSUB	PUSHCOM
	JSUB	POPCOM
	JSUB	SUMCOM
	JSUB	PRICOM
	JSUB	PRIFAIL		.여기까지 온거면 command를 잘못 입력한 것임
	J	LOOP


STKINIT	LDA	#STACK
	STA	TOP
	RSUB

.	print ">> "
PRIPROM	CLEAR	X	
PRLOOP	LDCH	PROMPT,X
	WD	OUTDEV
	TIX	#3
	JLT	PRLOOP
	RSUB	

.	print "fail!"
PRIFAIL	CLEAR	X
	CLEAR	A
FALOOP	LDCH	FAILSTR,X
	WD	OUTDEV
	TIX	#5
	JLT	FALOOP
	LDA	#0x0A
	WD	OUTDEV
	RSUB

.	print "EMPTY" and go to LOOP
PRIEMTY	CLEAR	X
	CLEAR	A
EMLOOP	LDCH	EMTYSTR,X
	WD	OUTDEV
	TIX	#5
	JLT	EMLOOP
	LDA	#0x0A
	WD	OUTDEV
	J	LOOP

.	print "FULL" and go to LOOP
PRIFULL	CLEAR	X
	CLEAR	A
FULOOP	LDCH	FULLSTR,X
	WD	OUTDEV
	TIX	#4
	JLT	FULOOP
	LDA	#0x0A
	WD	OUTDEV
	J	LOOP

.	get string and size from stdin
.	(set input string : (INBUF), set input size : (INSIZE))
SCAN	CLEAR	X
	CLEAR	A
	LDT	#1
SCLOOP	RD	INDEV
	STCH	INBUF,X
	ADDR	T,X
	COMP	#0x0A	.0x0A = line feed(\n)
	JEQ	EOF01
	J	SCLOOP
EOF01	RMO	X,A
	SUB	#1
	STA	INSIZE
	RSUB	

.	convert input string to integer 
.	(argument : (INBUF) , return : (TEMP_2))
CVRINT	CLEAR	X
	CLEAR	A
	STA	TEMP_2	.(TEMP_2)값 0으로 clear
	LDA	INSIZE
	. SUB	#1	.(input값)*10^(INSIZE-1)을 위해
	RMO	A,T	.(T) = (input size) - 1
CVLOOP	LDCH	INBUF,X
	SUB	#0x30
	STA	TEMP_1
	LDA	#1
	RMO	X,S	.CVLOOP의 index X를 S에 임시저장
	CLEAR	X
MULOOP	TIXR	T
	JEQ	SKIPMUL
	MUL	#10
	J	MULOOP
SKIPMUL	MUL	TEMP_1
	ADD	TEMP_2
	STA	TEMP_2
	RMO	T,A
	SUB	#1
	RMO	A,T
	RMO	S,X
	TIX	INSIZE
	JLT	CVLOOP
	RSUB

.	set size of stack
SETSIZE	STL	RETADDR
SETAGIN	JSUB	PRIPROM
	JSUB	SCAN	.(X)-1 = size of input
	LDA	INSIZE
	COMP	#0
	JEQ	FAIL01
	JSUB	CVRINT	
	LDA	TEMP_2
	COMP	#1
	JLT	FAIL01
	COMP	#99	
	JGT	FAIL01
	STA	STKSIZE
	LDL	RETADDR
	RSUB
FAIL01	JSUB	PRIFAIL
	J	SETAGIN


.	operation for TOP command
TOPCOM	CLEAR	X
	CLEAR	A
TOPLOOP	LDCH	INBUF,X
	RMO	A,T
	LDCH	TOPSTR,X
	COMPR	A,T
	JLT	FAIL02
	JGT	FAIL02
	TIX	#3
	JLT	TOPLOOP
	LDCH	INBUF,X
	COMP	#0x0A		.\n가 아니면 추가 입력이 있었음 
	JEQ	TOPFUNC
FAIL02	RSUB

TOPFUNC	LDA	TOP
	COMP	#STACK
	JEQ	PRIEMTY		.if stack is empty
	SUB	#3
	STA	TEMP_1
TLOOP	CLEAR	A
	LDCH	@TEMP_1
	COMP	#0x0A
	JEQ	EOF05
	WD	OUTDEV
	LDA	TEMP_1
	ADD	#1
	STA	TEMP_1
	J	TLOOP
EOF05	WD	OUTDEV
	J	LOOP


.	operation for PUSH command
.	push 숫자는 2자리 숫자까지만 가능(1~99)
PUSHCOM	CLEAR	X
	CLEAR	A
PUSLOOP	LDCH	INBUF,X
	RMO	A,T
	LDCH	PUSHSTR,X
	COMPR	A,T
	JLT	FAIL03
	JGT	FAIL03
	TIX	#4
	JLT	PUSLOOP
	LDCH	INBUF,X
	COMP	#0x0A
	JEQ	PUSFUNC
FAIL03	RSUB

PUSFUNC	LDA	STKSIZE
	MUL	#3
	LDT	#STACK
	ADDR	T,A
	COMP	TOP
	JEQ	PRIFULL
	JSUB	SCAN
	J	PUSH

PUSH	LDA	TOP
	STA	TEMP_1		
	CLEAR	X
PULOOP	RMO	X,A
	COMP	#0
	JEQ	PJUMP
	CLEAR	A
	LDCH	INBUF,X
	COMP	#0x0A
	JEQ	EOF04
	J	PUJUMP

PJUMP	CLEAR	A
	LDCH	INBUF,X
PUJUMP	JSUB	CHESTR
	CLEAR	S
	COMPR	S,T
	JEQ	FAIL08
EOF04	STCH	@TEMP_1
	LDA	TEMP_1
	ADD	#1
	STA	TEMP_1
	TIX	#2
	JLT	PULOOP
	LDA	#0x0A
	STCH	@TEMP_1
	LDA	TOP
	ADD	#3
	STA	TOP
	J	LOOP

FAIL08	JSUB	PRIFAIL
	J	LOOP

	
.	operation for POP command
POPCOM	CLEAR	X
	CLEAR	A
POPLOOP	LDCH	INBUF,X
	RMO	A,T
	LDCH	POPSTR,X
	COMPR	A,T
	JLT	FAIL04
	JGT	FAIL04
	TIX	#3
	JLT	POPLOOP
	LDCH	INBUF,X
	COMP	#0x0A
	JEQ	POPFUNC
FAIL04	RSUB

POPFUNC	LDA	TOP
	COMP	#STACK
	JEQ	PRIEMTY
	JSUB	POP
	CLEAR	A
	STA	@TOP
	J	LOOP

POP	LDA	TOP
	SUB	#3
	STA	TOP
	RSUB

.	operation of SUM command
SUMCOM	CLEAR	X
	CLEAR	A
SLOOP	LDCH	INBUF,X
	RMO	A,T
	LDCH	SUMSTR,X
	COMPR	A,T
	JLT	FAIL05
	JGT	FAIL05
	TIX	#3
	JLT	SLOOP
	LDCH	INBUF,X
	COMP	#0x0A
	JEQ	SUMFUNC
FAIL05	RSUB

SUMFUNC	CLEAR	T
	LDA	TOP
	COMP	#STACK
	JEQ	PRIEMTY
SUMLOOP	

	SUB	#3
	COMP	#STACK
	JLT	EOF02
	STA	TEMP_1
	LDA	@TEMP_1
	ADDR	A,T
	LDA	TEMP_1
	J	SUMLOOP
EOF02	RMO	T,A
	
	WD	OUTDEV
	LDA	#0x0A
	WD	OUTDEV
	J	LOOP


.	operation of PRINT command
PRICOM	CLEAR	X
	CLEAR	A
PLOOP	LDCH	INBUF,X
	RMO	A,T
	LDCH	PRISTR,X
	COMPR	A,T
	JLT	FAIL06
	JGT	FAIL06
	TIX	#5
	JLT	PLOOP
	LDCH	INBUF,X
	COMP	#0x0A
	JEQ	PRIFUNC
FAIL06	RSUB

PRIFUNC	LDA	TOP
	COMP	#STACK
	JEQ	PRIEMTY
	LDX	#STACK
PRILOOP	STX	TEMP_1
FLOOP	CLEAR	A
	LDCH	@TEMP_1
	COMP	#0x0A
	JEQ	EOF06
	WD	OUTDEV
	LDA	TEMP_1
	ADD	#1
	STA	TEMP_1
	J	FLOOP
EOF06	LDA	#0x20		.0x20 = blank
	WD	OUTDEV
	RMO	X,A
	ADD	#3
	RMO	A,X
	COMP	TOP
	JEQ	FINPRI
	J	PRILOOP
FINPRI	LDA	#0x0A
	WD	OUTDEV
	J	LOOP


.	check if (A) is number and if (A) is not number, set (T) = 0
CHESTR	COMP	#0x31
	JLT	FAIL07
	COMP	#0x39
	JGT	FAIL07
	LDT	#1
	RSUB
FAIL07	LDT	#0
	RSUB


PROMPT	BYTE	C'>> '
FAILSTR	BYTE	C'fail!'
EMTYSTR	BYTE	C'EMPTY'
FULLSTR	BYTE	C'FULL'
TOPSTR	BYTE	C'TOP'
PUSHSTR	BYTE	C'PUSH'
POPSTR	BYTE	C'POP'
SUMSTR	BYTE	C'SUM'
PRISTR	BYTE	C'PRINT'
INDEV	BYTE	0
OUTDEV	BYTE	1
RETADDR	RESW	1	.return address
TEMP_1	RESW	1
TEMP_2	RESW	1
INSIZE	RESW	1	.store input size
. OUTVLU	RESW	1	.store output value
INBUF	RESB	10	.store input string
STKSIZE	RESW	1	.store stack size
TOP	RESW	1	
STACK	RESW	99